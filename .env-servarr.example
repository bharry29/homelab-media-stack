# =============================================================================
# SERVARR STACK - Environment Configuration
# =============================================================================
# File: .env-servarr  
# Used with: docker-compose-servarr.yml
#
# This file configures the Download & Management stack including:
# • VPN gateway and download clients
# • Indexer management and media automation
# • File processing and organization
# • Service dashboard and updates
# =============================================================================

# =============================================================================
# SYSTEM CONFIGURATION
# =============================================================================

# User and Group IDs
# Run 'id' command to find your system's UID and GID
# These must match your system user to avoid permission issues
PUID=1001
PGID=1000

# System Timezone
# Format: Region/City (e.g., America/New_York, Europe/London, Asia/Tokyo)
# Full list: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
TZ=America/Los_Angeles

# =============================================================================
# DIRECTORY CONFIGURATION
# =============================================================================

# Servarr Stack Configuration Directory
# Where container configurations, databases, and settings are stored
# Recommended: Use SSD storage for better performance
SERVARR_CONFIG_PATH=/volume1/docker/servarr

# Shared Data Directory  
# Where downloads and organized media are stored
# Shared with streamarr stack for media access
# Recommended: Use large HDD storage for media files
DATA_PATH=/volume1/data

# Media Data Directory (for FileBot output)
# Organized media output directory - can be same as DATA_PATH or separate
# Used by filebot-watcher for final media organization
MEDIA_DATA_PATH=/volume1/data/media

# Directory Structure:
# ${SERVARR_CONFIG_PATH}/
# ├── gluetun/              # VPN configuration
# ├── qbittorrent/          # BitTorrent client settings
# ├── sabnzbd/              # Usenet client settings
# ├── prowlarr/             # Indexer configurations
# ├── sonarr/               # TV show management
# ├── radarr/               # Movie management  
# ├── lidarr/               # Music management
# ├── bazarr/               # Subtitle management
# └── homarr/               # Dashboard configuration
#
# ${DATA_PATH}/
# ├── downloads/            # Download staging area
# │   ├── complete/         # Finished downloads (FileBot monitors)
# │   └── incomplete/       # In-progress downloads
# └── media/                # Organized media (FileBot output)
#     ├── movies/           # Movie library
#     ├── tv/               # TV show library
#     └── music/            # Music library

# =============================================================================
# VPN CONFIGURATION
# =============================================================================

# VPN Service Provider
# Supported providers: https://github.com/qdm12/gluetun/wiki
# Popular choices: privado, nordvpn, expressvpn, surfshark, airvpn, pia, protonvpn
VPN_SERVICE_PROVIDER=privado

# VPN Protocol
# Options: openvpn, wireguard
# OpenVPN: More compatible, easier setup
# WireGuard: Faster, modern (if supported by provider)
VPN_TYPE=openvpn

# VPN Credentials
# For most providers: your account email and password
# Some providers require special VPN credentials
OPENVPN_USER=your-vpn-username
OPENVPN_PASSWORD=your-vpn-password

# VPN Server Location
# Comma-separated list, no spaces after commas
# Examples: Netherlands, United States, United Kingdom, Germany, Canada
SERVER_COUNTRIES=Netherlands

# VPN Server Cities (optional)
# Only specify if you want a specific city within the country
# Examples: Amsterdam, New York, London  
SERVER_CITIES=Amsterdam

# Port Forwarding (optional)
# Required for optimal torrent performance with private trackers
# Leave empty if your provider doesn't support port forwarding
# Providers with port forwarding: AirVPN, PIA, ProtonVPN, Mullvad
FIREWALL_VPN_INPUT_PORTS=

# VPN Health Check Settings
HEALTH_VPN_DURATION_INITIAL=60s
VPN_LOG_LEVEL=info

# =============================================================================
# SERVICE PORT CONFIGURATION  
# =============================================================================

# Web interface ports - change if conflicts with other services
SONARR_PORT=8989             # TV show management
RADARR_PORT=7878             # Movie management
LIDARR_PORT=8686             # Music management
BAZARR_PORT=6767             # Subtitle management
FILEBOT_PORT=5452            # File processing web interface
HOMARR_PORT=7575             # Service dashboard

# VPN-protected services (accessed through Gluetun)
# qBittorrent: 8080 (BitTorrent client)
# SABnzbd: 7080 (Usenet client)
# Prowlarr: 9696 (Indexer management)

# =============================================================================
# FILEBOT CONFIGURATION
# =============================================================================

# FileBot Security Tokens
# SECURITY: Keep these tokens private! Do not commit to version control.
# Generate new tokens if compromised.

# Plex Token for FileBot integration
# How to get: Plex Settings → Account → Privacy → "Show Advanced" → Copy XML token
# Or use: https://support.plex.tv/articles/204059436-finding-an-authentication-token-x-plex-token/
PLEX_TOKEN=xxxxx

# Discord Webhook for FileBot notifications (optional)
# Create webhook: Discord Server → Settings → Integrations → Webhooks → New Webhook
# Leave empty to disable Discord notifications
DISCORD_WEBHOOK=YOUR_DISCORD_WEBHOOK_URL_HERE

# FileBot Watcher Settings
# Time to wait for file changes to settle before processing (in seconds)
# Default: 300 (5 minutes) - increase for slower storage or large files
FILEBOT_SETTLE_TIME=300

# FileBot uses named Docker volume for persistent storage
# Stores license, configuration, and processing history
# Shared between filebot-node and filebot-watcher

# Processing Workflow:
# 1. Download clients (qBittorrent/SABnzbd) → /data/downloads/complete/
# 2. FileBot Watcher monitors → /data/downloads/complete/
# 3. FileBot processes → /media/organized/{movies,tv,music}/
# 4. Streamarr stack serves → organized media files

# FileBot License Installation (required for full functionality):
#
# Method 1: Install via FileBot Node web interface
# - Access: http://your-server-ip:5452
# - Navigate: Tools → License → Upload license file
#
# Method 2: Install via command line from file
# docker run --rm -it \
#   -v filebot-data:/data \
#   -v "/path/to/license.psm:/volume1/license.psm" \
#   -e PUID=1000 -e PGID=1000 \
#   rednoah/filebot --license /volume1/license.psm
#
# Method 3: Install via command line interactive
# docker run --rm -it \
#   -v filebot-data:/data \
#   -e PUID=1000 -e PGID=1000 \
#   rednoah/filebot --license

# =============================================================================
# WATCHTOWER AUTO-UPDATE CONFIGURATION
# =============================================================================

# Update Schedule (cron format)
# Examples:
# "0 6 * * *"     = Daily at 6:00 AM
# "0 2 * * 0"     = Weekly on Sunday at 2:00 AM
# "0 4 1 * *"     = Monthly on 1st at 4:00 AM
# "@every 24h"    = Every 24 hours
WATCHTOWER_SCHEDULE=0 6 * * *

# Update Behavior
WATCHTOWER_CLEANUP=true                    # Remove old images after update
WATCHTOWER_REMOVE_VOLUMES=false           # Keep named volumes
WATCHTOWER_INCLUDE_STOPPED=true           # Update stopped containers
WATCHTOWER_LABEL_ENABLE=true              # Only update labeled containers
WATCHTOWER_DEBUG=false                    # Enable debug logging

# Notification Settings (optional)
# Supported services: email, slack, discord, gotify, pushover, teams, etc.
# Leave empty to disable notifications
WATCHTOWER_NOTIFICATIONS=

# Notification URL/Webhook (if using notifications)
# Format depends on service:
# Discord: discord://webhook-url
# Slack: slack://botname@token-a/token-b/token-c
# Email: smtp://user:pass@host:port/?fromAddress=from@example.com&toAddresses=to@example.com
WATCHTOWER_NOTIFICATION_URL=

# =============================================================================
# SERVICE ACCESS URLS
# =============================================================================

# After deployment, access services at:
# • Homarr Dashboard: http://server-ip:7575 (main dashboard)
# • qBittorrent: http://server-ip:8080 (BitTorrent client)
# • SABnzbd: http://server-ip:7080 (Usenet client)
# • Prowlarr: http://server-ip:9696 (indexer management)
# • Sonarr: http://server-ip:8989 (TV show automation)
# • Radarr: http://server-ip:7878 (movie automation)
# • Lidarr: http://server-ip:8686 (music automation)
# • Bazarr: http://server-ip:6767 (subtitle management)
# • FileBot Node: http://server-ip:5452 (file processing)

# =============================================================================
# DEPLOYMENT COMMANDS
# =============================================================================

# Create directory structure:
# mkdir -p /volume1/docker/servarr/{gluetun,qbittorrent,sabnzbd,prowlarr,sonarr,radarr,lidarr,bazarr,homarr}
# mkdir -p /volume1/data/{downloads/{complete,incomplete},media/{movies,tv,music}}
# chown -R 1000:1000 /volume1/docker/servarr /volume1/data

# Deploy servarr stack:
# docker-compose --env-file .env-servarr -f docker-compose-servarr.yml up -d

# Check status:
# docker-compose --env-file .env-servarr -f docker-compose-servarr.yml ps

# View logs:
# docker-compose --env-file .env-servarr -f docker-compose-servarr.yml logs -f gluetun

# Stop stack:
# docker-compose --env-file .env-servarr -f docker-compose-servarr.yml down

# =============================================================================
# INTEGRATION WITH STREAMARR STACK
# =============================================================================

# Data Sharing:
# • Servarr processes downloads → ${DATA_PATH}/media/
# • Streamarr serves content ← ${DATA_PATH}/media/
# • Both stacks share same data directory for seamless integration

# Service Communication:
# • Overseerr (streamarr) → Sonarr/Radarr (servarr) for requests
# • All inter-stack communication via host networking
# • No direct container networking between stacks required

# =============================================================================
# SECURITY NOTES
# =============================================================================

# IMPORTANT: This file contains sensitive information!
# • Never commit this file to public repositories
# • Use .gitignore to exclude .env files
# • Regularly rotate tokens and credentials
# • Use strong, unique passwords for VPN and services
# • Consider using Docker secrets for production deployments

# If tokens are compromised:
# • PLEX_TOKEN: Generate new token from Plex account settings
# • DISCORD_WEBHOOK: Delete old webhook, create new one
# • VPN credentials: Change password in provider account

# =============================================================================
# END OF SERVARR CONFIGURATION
# =============================================================================
